Commands

1. git init
2. git status
3. git status
4. rm -rf .git
5. git log
6. git config --global user.name "Manas"
7. git config --global user.email "iamscientistmanas@gmail.com"
8. git config user.name
9. git config user.email
10. git clone <url>
11. git add --a
12. git add <file>
13. git commit
14. git commit -m "Message>
15. touch <file name> ->to make new file
16. .gitignore
17. ls -la .git
18. mkdir <name of repo>     --to create a repository
19. cd <name of repo>    -to move to that repo
20. git branch <branch name>     --to create the branch
21. git branch
* master
  my1stbransch

Note the output lists two branches - the default master branch with an asterix * next to it indicating that it is the currently active branch, and the newly created mys1stbranch:

22. git checkout <branch name>
23. As a shortcut to creating and branch using git branch and then making it active using git checkout you can use the shortcut like follows with the -b option that creates the branch and makes it active in one step:

git checkout -b my1stbranch

24. echo 'Here is some text in my newfile.' >> newfile
cat newfile

25. git revert HEAD --no-edit

Sometimes you may not fully test your changes before comitting them and may have undesirable consequences … you can back out your changes by using a git revert command like the following. You can either specify the id of your commit that you can see from the previous log output or use the shortcut HEAD to rollback the last commit

26. Now let’s merge the contents of the my1stbranch into the master branch. We will first need to make the master branch active using the following git checkout command:

git checkout master

Now lets merge the changes from my1stbranch into master

git merge my1stbranch
git log

Now that changes have been merged into master branch, the my1stbranch can be deleted using the following git branch command with the -d option:

git branch -d my1stbranch

27. pip3 install -r requirements.txt

28. git diff
Compare working directory and staging area

29. 
To configure a virtual environment in Visual Studio Code (VS Code), you can use Python's built-in venv module or a third-party tool like virtualenv or conda, depending on your needs. Below are the basic steps and commands to create and activate a virtual environment in VS Code using Python's built-in venv module. Make sure you have Python installed on your system.

Open a Terminal in VS Code:

Open VS Code and press Ctrl+~ (or Cmd+~ on macOS) to open the integrated terminal. This terminal is where you'll run the commands.

Create a Virtual Environment:

You can create a virtual environment in your project folder or any desired location. Navigate to your project folder (or any location you prefer), and run the following command:

bash: 

python -m venv venv

Activate: 

./venv/Scripts/activate


*************************************************

Docker: 

docker build -t <repo name>:<tag> .(means where it can find docker file)

docker image ls

docker login
docker tag <the system image> <username/repo name>
docker push <username/repo name>

docker ps (current running images)
docker ps -a (for all images)

docker images: To show images present in the system

For Running:

docker run <image><tag>
for background:
docker run -d <image><tag>
for logging
docker logs <container id>

To stop the container
docker stop <container id>

To access the containers by the system

docker run -d -p <local system port on which you want to run>:<service port> <image><tag>

Now, instead of creating a new container every time, we can restart the previous container

docker start <container id>

For not autogenerated names: 

docker run --name <name> -d -p 9000:90 nginx:123

To get the terminal of the running container

docker exec -it <container id> /bin/bash


To remove the image first remove the container

To remove container
docker rm <container>

To remove image
docker rmi <image> 

To create a network:
docker network create <neytwork name>

docker compose -f <file.yaml> up



***********************************************


